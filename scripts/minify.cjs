// @ts-check
/* eslint-disable @typescript-eslint/no-require-imports */

const { resolve } = require("path");
const crawl = require("./crawl.cjs");
const { readFileSync, writeFileSync } = require("fs");

const BUILD_DIRECTORY = resolve(__dirname, "../build");
/** @type { import("terser").MinifyOptions } */
const TERSER_OPTIONS = {
  compress: {
    booleans_as_integers: true,
    ecma: 2020,
    expression: true,
    keep_fargs: false,
    module: true,
    toplevel: true,
    passes: 3,
    unsafe: true,
  },
  mangle: {
    module: true,
    toplevel: true,
  },
  format: {
    comments: false,
    indent_level: 0,
  },
};
/** @type { import("html-minifier-terser").Options } */
const HTML_TERSER_OPTIONS = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: false,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: TERSER_OPTIONS,
  minifyURLs: true,
  noNewlinesBeforeTagClose: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
};

const { minify_sync } = require("terser");
const { minify } = require("html-minifier-terser");

const FILES = {
  JS: /\.js$/,
  HTML: /\.html$/,
  CSS: /\.css$/,
};

const files = crawl(BUILD_DIRECTORY, "files", 2).filter(
  (file) => FILES.JS.test(file) || FILES.HTML.test(file) || FILES.CSS.test(file)
);

(async () => {
  for (const file of files) {
    console.log(
      `[minify] | Minifying ${file.slice(BUILD_DIRECTORY.length + 1)}`
    );

    const fileContents = readFileSync(file, "utf-8");
    const minified = await (FILES.JS.test(file)
      ? minifyJS(fileContents)
      : FILES.HTML.test(file)
        ? minifyHTML(fileContents)
        : minifyCSS(fileContents));

    if (minified === null) {
      console.warn(`Could not minify file ${file}.`);
      continue;
    }

    writeFileSync(file, minified);
  }
})();

/**
 * @argument { string } fileContents
 * @returns { string | null }
 */
function minifyJS(fileContents) {
  return minify_sync(fileContents, TERSER_OPTIONS).code ?? null;
}

/**
 * @argument { string } fileContents
 * @returns { Promise<string | null> }
 */
async function minifyHTML(fileContents) {
  return minify(fileContents, HTML_TERSER_OPTIONS);
}

/**
 * @argument { string } fileContents
 * @returns { Promise<string | null> }
 */
async function minifyCSS(fileContents) {
  const newFileContents = `<style>${fileContents}</style>`;
  const minified = await minify(newFileContents, HTML_TERSER_OPTIONS);

  return minified.slice(7, minified.length - 8);
}
